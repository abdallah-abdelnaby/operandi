from json import load
from os import environ
from pkg_resources import resource_filename

BS: str = '{}'
SPACES = '    '
CONST_DIR_IN: str = 'input_group'
CONST_DIR_OUT: str = 'output_group'
CONST_PAGE_RANGE: str = 'page_range'
CONST_METS_PATH: str = 'mets_path'
CONST_METS_SOCKET_PATH: str = 'mets_socket_path'
CONST_WORKSPACE_DIR: str = 'workspace_dir'

OCRD_ALL_JSON_FILE = resource_filename(__name__, 'ocrd_all_tool.json')
with open(OCRD_ALL_JSON_FILE) as f:
    OCRD_ALL_JSON = load(f)

OTON_LOG_LEVEL = environ.get("OTON_LOG_LEVEL", "INFO")
OTON_LOG_FORMAT = '%(asctime)s %(levelname)s %(name)s:%(funcName)s: %(lineno)s: %(message)s'

PARAMS_KEY_ENV_WRAPPER_CMD_CORE: str = 'params.env_wrapper_cmd_core'
PARAMS_KEY_ENV_WRAPPER_CMD_STEP: str = 'params.env_wrapper_cmd_step'
PARAMS_KEY_INPUT_FILE_GRP: str = 'params.input_file_group'
PARAMS_KEY_METS_PATH: str = 'params.mets_path'
PARAMS_KEY_METS_SOCKET_PATH: str = 'params.mets_socket_path'
PARAMS_KEY_WORKSPACE_DIR: str = 'params.workspace_dir'
PARAMS_KEY_PAGES: str = 'params.pages'
PARAMS_KEY_CPUS: str = 'params.cpus'
PARAMS_KEY_RAM: str = 'params.ram'
PARAMS_KEY_FORKS: str = 'params.forks'
PARAMS_KEY_CPUS_PER_FORK: str = 'params.cpus_per_fork'
PARAMS_KEY_RAM_PER_FORK: str = 'params.ram_per_fork'

WORKFLOW_COMMENT = f"// This workflow was automatically generated by the operandi_utils.oton module"
