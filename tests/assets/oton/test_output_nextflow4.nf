// This workflow was automatically generated by the v2.17.0 operandi_utils.oton module
nextflow.enable.dsl = 2

params.input_file_group = "OCR-D-IMG"
params.mets_path = "null"
params.workspace_dir = "null"
params.pages = "null"
params.forks = "4"
params.env_wrapper_cmd_step0 = "null"
params.env_wrapper_cmd_step1 = "null"
params.env_wrapper_cmd_step2 = "null"
params.env_wrapper_cmd_step3 = "null"
params.env_wrapper_cmd_step4 = "null"
params.env_wrapper_cmd_step5 = "null"
params.env_wrapper_cmd_step6 = "null"
params.env_wrapper_cmd_step7 = "null"
params.env_wrapper_cmd_step8 = "null"
params.env_wrapper_cmd_step9 = "null"
params.env_wrapper_cmd_step10 = "null"
params.env_wrapper_cmd_step11 = "null"
params.env_wrapper_cmd_step12 = "null"

process split_page_ranges {
    debug true
    maxForks params.forks

    input:
        val range_multiplier

    output:
        env mets_file_chunk
        env current_range_pages

    script:
        """
        current_range_pages=\$(ocrd workspace -d ${params.workspace_dir} list-page -f comma-separated -D ${params.forks} -C ${range_multiplier})
        echo "Current range is: \$current_range_pages"
        mets_file_chunk=\$(echo ${params.workspace_dir}/mets_${range_multiplier}.xml)
        echo "Mets file chunk path: \$mets_file_chunk"
        \$(cp -p ${params.mets_path} \$mets_file_chunk)
        """
}

process ocrd_olena_binarize_0 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-olena-binarize -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"impl": "sauvola"}'
        """
}

process ocrd_anybaseocr_crop_1 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-anybaseocr-crop -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group}
        """
}

process ocrd_olena_binarize_2 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-olena-binarize -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"impl": "kim"}'
        """
}

process ocrd_cis_ocropy_denoise_3 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-cis-ocropy-denoise -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "page"}'
        """
}

process ocrd_cis_ocropy_deskew_4 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-cis-ocropy-deskew -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "page"}'
        """
}

process ocrd_tesserocr_segment_region_5 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-tesserocr-segment-region -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group}
        """
}

process ocrd_segment_repair_6 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-segment-repair -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"plausibilize": true}'
        """
}

process ocrd_cis_ocropy_deskew_7 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-cis-ocropy-deskew -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "region"}'
        """
}

process ocrd_cis_ocropy_clip_8 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-cis-ocropy-clip -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "region"}'
        """
}

process ocrd_tesserocr_segment_line_9 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-tesserocr-segment-line -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group}
        """
}

process ocrd_segment_repair_10 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-segment-repair -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"sanitize": true}'
        """
}

process ocrd_cis_ocropy_dewarp_11 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-cis-ocropy-dewarp -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group}
        """
}

process ocrd_calamari_recognize_12 {
    debug true
    maxForks params.forks

    input:
        val mets_path
        val page_range
        val workspace_dir
        val input_group
        val output_group

    output:
        val mets_path
        val page_range
        val workspace_dir

    script:
        """
        ocrd-calamari-recognize -w ${workspace_dir} -m ${mets_path} -I ${input_group} -O ${output_group} -p '{"checkpoint_dir": "qurator-gt4histocr-1.0"}'
        """
}

process merging_mets {
    debug true
    maxForks 1

    input:
        val mets_file_chunk
        val page_range

    script:
        """
        ocrd workspace -d ${params.workspace_dir} merge --force --no-copy-files ${mets_file_chunk} --page-id ${page_range}
        rm ${mets_file_chunk}
        """
}

workflow {
    main:
        ch_range_multipliers = Channel.of(0..params.forks.intValue()-1)
        split_page_ranges(ch_range_multipliers)
        ocrd_olena_binarize_0(split_page_ranges.out[0], split_page_ranges.out[1], params.workspace_dir, params.input_file_group "OCR-D-BIN")
        ocrd_anybaseocr_crop_1(ocrd_olena_binarize_0.out[0], ocrd_olena_binarize_0.out[1], ocrd_olena_binarize_0.out[2], "OCR-D-BIN", "OCR-D-CROP")
        ocrd_olena_binarize_2(ocrd_anybaseocr_crop_1.out[0], ocrd_anybaseocr_crop_1.out[1], ocrd_anybaseocr_crop_1.out[2], "OCR-D-CROP", "OCR-D-BIN2")
        ocrd_cis_ocropy_denoise_3(ocrd_olena_binarize_2.out[0], ocrd_olena_binarize_2.out[1], ocrd_olena_binarize_2.out[2], "OCR-D-BIN2", "OCR-D-BIN-DENOISE")
        ocrd_cis_ocropy_deskew_4(ocrd_cis_ocropy_denoise_3.out[0], ocrd_cis_ocropy_denoise_3.out[1], ocrd_cis_ocropy_denoise_3.out[2], "OCR-D-BIN-DENOISE", "OCR-D-BIN-DENOISE-DESKEW")
        ocrd_tesserocr_segment_region_5(ocrd_cis_ocropy_deskew_4.out[0], ocrd_cis_ocropy_deskew_4.out[1], ocrd_cis_ocropy_deskew_4.out[2], "OCR-D-BIN-DENOISE-DESKEW", "OCR-D-SEG-REG")
        ocrd_segment_repair_6(ocrd_tesserocr_segment_region_5.out[0], ocrd_tesserocr_segment_region_5.out[1], ocrd_tesserocr_segment_region_5.out[2], "OCR-D-SEG-REG", "OCR-D-SEG-REPAIR")
        ocrd_cis_ocropy_deskew_7(ocrd_segment_repair_6.out[0], ocrd_segment_repair_6.out[1], ocrd_segment_repair_6.out[2], "OCR-D-SEG-REPAIR", "OCR-D-SEG-REG-DESKEW")
        ocrd_cis_ocropy_clip_8(ocrd_cis_ocropy_deskew_7.out[0], ocrd_cis_ocropy_deskew_7.out[1], ocrd_cis_ocropy_deskew_7.out[2], "OCR-D-SEG-REG-DESKEW", "OCR-D-SEG-REG-DESKEW-CLIP")
        ocrd_tesserocr_segment_line_9(ocrd_cis_ocropy_clip_8.out[0], ocrd_cis_ocropy_clip_8.out[1], ocrd_cis_ocropy_clip_8.out[2], "OCR-D-SEG-REG-DESKEW-CLIP", "OCR-D-SEG-LINE")
        ocrd_segment_repair_10(ocrd_tesserocr_segment_line_9.out[0], ocrd_tesserocr_segment_line_9.out[1], ocrd_tesserocr_segment_line_9.out[2], "OCR-D-SEG-LINE", "OCR-D-SEG-REPAIR-LINE")
        ocrd_cis_ocropy_dewarp_11(ocrd_segment_repair_10.out[0], ocrd_segment_repair_10.out[1], ocrd_segment_repair_10.out[2], "OCR-D-SEG-REPAIR-LINE", "OCR-D-SEG-LINE-RESEG-DEWARP")
        ocrd_calamari_recognize_12(ocrd_cis_ocropy_dewarp_11.out[0], ocrd_cis_ocropy_dewarp_11.out[1], ocrd_cis_ocropy_dewarp_11.out[2], "OCR-D-SEG-LINE-RESEG-DEWARP", "OCR-D-OCR")
        merging_mets(ocrd_calamari_recognize_12.out[0], ocrd_calamari_recognize_12.out[1])
}
